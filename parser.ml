type token =
  | LAMBDA
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | SUCC
  | PRED
  | ISZERO
  | LET
  | LETREC
  | IN
  | BOOL
  | NAT
  | STRING
  | UNIT
  | UNITV
  | LCOR
  | RCOR
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | LIST
  | NIL
  | CONS
  | ISNIL
  | HEAD
  | TAIL
  | COMMA
  | SEMICOLON
  | DOT
  | EQ
  | COLON
  | ARROW
  | EOF
  | QM
  | CONCAT
  | ID of (string)
  | INTV of (int)
  | STRINGV of (string)
  | STRINGT of (string)

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
  open Lambda;;
# 50 "parser.ml"
let yytransl_const = [|
  257 (* LAMBDA *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* SUCC *);
  264 (* PRED *);
  265 (* ISZERO *);
  266 (* LET *);
  267 (* LETREC *);
  268 (* IN *);
  269 (* BOOL *);
  270 (* NAT *);
  271 (* STRING *);
  272 (* UNIT *);
  273 (* UNITV *);
  274 (* LCOR *);
  275 (* RCOR *);
  276 (* LPAREN *);
  277 (* RPAREN *);
  278 (* LBRACKET *);
  279 (* RBRACKET *);
  280 (* LIST *);
  281 (* NIL *);
  282 (* CONS *);
  283 (* ISNIL *);
  284 (* HEAD *);
  285 (* TAIL *);
  286 (* COMMA *);
  287 (* SEMICOLON *);
  288 (* DOT *);
  289 (* EQ *);
  290 (* COLON *);
  291 (* ARROW *);
    0 (* EOF *);
  292 (* QM *);
  293 (* CONCAT *);
    0|]

let yytransl_block = [|
  294 (* ID *);
  295 (* INTV *);
  296 (* STRINGV *);
  297 (* STRINGT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\003\000\003\000\003\000\003\000\
\003\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\006\000\006\000\006\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\008\000\008\000\010\000\010\000\009\000\009\000\
\005\000\005\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\012\000\012\000\014\000\014\000\013\000\
\013\000\000\000"

let yylen = "\002\000\
\004\000\002\000\001\000\003\000\001\000\006\000\006\000\006\000\
\008\000\001\000\002\000\002\000\002\000\003\000\002\000\003\000\
\006\000\005\000\005\000\005\000\004\000\003\000\003\000\001\000\
\003\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\000\000\001\000\003\000\005\000\001\000\003\000\
\001\000\003\000\003\000\003\000\001\000\001\000\001\000\001\000\
\003\000\003\000\004\000\000\000\001\000\003\000\005\000\001\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\027\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\032\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\000\000\000\030\000\
\058\000\000\000\003\000\000\000\000\000\024\000\000\000\029\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\
\033\000\034\000\045\000\046\000\047\000\048\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\016\000\026\000\000\000\004\000\022\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\
\000\000\000\000\000\000\053\000\000\000\021\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\044\000\043\000\000\000\000\000\049\000\050\000\000\000\
\042\000\000\000\000\000\000\000\000\000\007\000\006\000\008\000\
\000\000\000\000\038\000\000\000\057\000\051\000\000\000\000\000\
\000\000\009\000\055\000"

let yydgoto = "\002\000\
\025\000\026\000\027\000\028\000\097\000\029\000\030\000\042\000\
\043\000\044\000\076\000\098\000\099\000\100\000"

let yysindex = "\005\000\
\116\255\000\000\225\254\000\000\000\000\157\255\211\255\211\255\
\211\255\227\254\228\254\000\000\157\255\198\255\006\255\008\255\
\010\255\011\255\014\255\238\254\005\255\000\000\007\255\000\000\
\000\000\004\000\000\000\211\255\229\254\000\000\012\255\000\000\
\034\255\009\255\009\255\009\255\017\255\018\255\021\255\022\255\
\026\255\028\255\039\255\000\000\080\001\080\001\080\001\080\001\
\080\001\029\255\157\255\157\255\157\255\000\000\009\255\219\254\
\211\255\080\001\157\255\157\255\080\001\000\000\157\255\157\255\
\000\000\000\000\000\000\000\000\000\000\000\000\080\001\080\001\
\050\001\049\255\051\255\036\255\053\255\061\255\062\255\063\255\
\000\000\000\000\013\000\000\000\000\000\000\000\009\255\058\255\
\086\255\081\255\066\255\064\255\000\000\082\255\079\255\068\255\
\077\255\085\255\087\255\000\000\080\001\000\000\080\001\211\255\
\211\255\211\255\211\255\000\000\157\255\157\255\157\255\157\255\
\069\255\000\000\000\000\080\001\080\001\000\000\000\000\096\255\
\000\000\057\255\009\255\009\255\009\255\000\000\000\000\000\000\
\104\255\022\255\000\000\092\255\000\000\000\000\009\255\157\255\
\088\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\108\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\001\000\000\
\000\000\000\000\000\000\055\001\015\001\000\000\000\000\000\000\
\000\000\001\000\031\000\061\000\000\000\000\000\000\000\046\255\
\109\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\091\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\111\255\000\000\000\000\004\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\121\000\000\000\
\000\000\000\000\000\000\112\255\000\000\000\000\000\000\000\000\
\114\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\151\000\181\000\211\000\000\000\000\000\000\000\
\000\000\000\000\000\000\117\255\000\000\000\000\241\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\087\000\250\255\000\000\228\255\007\000\000\000\000\000\
\082\000\034\000\000\000\000\000\032\000\011\000"

let yytablesize = 616
let yytable = "\033\000\
\011\000\085\000\086\000\054\000\056\000\001\000\039\000\041\000\
\031\000\057\000\037\000\038\000\108\000\034\000\035\000\036\000\
\075\000\077\000\078\000\079\000\080\000\050\000\041\000\045\000\
\041\000\046\000\041\000\047\000\048\000\088\000\012\000\049\000\
\091\000\041\000\055\000\041\000\041\000\051\000\059\000\052\000\
\056\000\062\000\094\000\095\000\082\000\058\000\084\000\029\000\
\029\000\060\000\065\000\061\000\089\000\090\000\063\000\064\000\
\092\000\041\000\004\000\005\000\013\000\066\000\029\000\087\000\
\081\000\029\000\101\000\029\000\029\000\102\000\103\000\104\000\
\120\000\012\000\121\000\029\000\013\000\029\000\014\000\105\000\
\106\000\107\000\029\000\029\000\029\000\029\000\029\000\132\000\
\056\000\109\000\015\000\110\000\111\000\113\000\021\000\022\000\
\032\000\024\000\112\000\115\000\114\000\116\000\126\000\127\000\
\128\000\129\000\117\000\118\000\130\000\119\000\122\000\123\000\
\124\000\125\000\134\000\136\000\003\000\004\000\005\000\006\000\
\014\000\137\000\007\000\008\000\009\000\010\000\011\000\096\000\
\135\000\138\000\035\000\039\000\012\000\052\000\037\000\013\000\
\056\000\014\000\083\000\054\000\015\000\016\000\017\000\018\000\
\019\000\093\000\131\000\139\000\133\000\000\000\018\000\020\000\
\000\000\021\000\022\000\023\000\024\000\003\000\004\000\005\000\
\006\000\000\000\000\000\007\000\008\000\009\000\010\000\011\000\
\000\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\
\013\000\000\000\014\000\000\000\019\000\015\000\016\000\017\000\
\018\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\020\000\000\000\021\000\022\000\032\000\024\000\003\000\004\000\
\005\000\006\000\000\000\000\000\007\000\008\000\009\000\010\000\
\011\000\000\000\020\000\000\000\004\000\005\000\012\000\000\000\
\000\000\013\000\000\000\014\000\000\000\000\000\015\000\016\000\
\017\000\018\000\019\000\012\000\000\000\000\000\013\000\000\000\
\014\000\020\000\000\000\021\000\022\000\040\000\024\000\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\021\000\022\000\032\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\000\011\000\000\000\011\000\011\000\000\000\
\000\000\000\000\029\000\000\000\011\000\000\000\010\000\000\000\
\000\000\011\000\000\000\000\000\011\000\011\000\011\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\011\000\
\012\000\012\000\053\000\012\000\012\000\011\000\011\000\011\000\
\011\000\011\000\012\000\053\000\000\000\000\000\000\000\012\000\
\000\000\000\000\012\000\012\000\012\000\012\000\005\000\000\000\
\000\000\000\000\000\000\000\000\012\000\012\000\013\000\013\000\
\000\000\013\000\013\000\012\000\012\000\012\000\012\000\012\000\
\013\000\000\000\000\000\000\000\000\000\013\000\000\000\000\000\
\013\000\013\000\013\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\000\013\000\015\000\015\000\000\000\015\000\
\015\000\013\000\013\000\013\000\013\000\013\000\015\000\000\000\
\000\000\000\000\000\000\015\000\000\000\000\000\015\000\015\000\
\015\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\
\015\000\015\000\014\000\014\000\000\000\014\000\014\000\015\000\
\015\000\015\000\015\000\015\000\014\000\000\000\000\000\000\000\
\000\000\014\000\000\000\000\000\014\000\014\000\014\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\014\000\
\018\000\018\000\000\000\018\000\018\000\014\000\014\000\014\000\
\014\000\014\000\018\000\000\000\000\000\000\000\000\000\018\000\
\000\000\000\000\018\000\018\000\018\000\018\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\018\000\019\000\019\000\
\000\000\019\000\019\000\018\000\018\000\018\000\018\000\018\000\
\019\000\000\000\000\000\000\000\000\000\019\000\000\000\000\000\
\019\000\019\000\019\000\019\000\000\000\000\000\000\000\000\000\
\000\000\000\000\019\000\019\000\020\000\020\000\000\000\020\000\
\020\000\019\000\019\000\019\000\019\000\019\000\020\000\000\000\
\000\000\000\000\000\000\020\000\000\000\000\000\020\000\020\000\
\020\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\020\000\020\000\017\000\017\000\000\000\017\000\017\000\020\000\
\020\000\020\000\020\000\020\000\017\000\000\000\000\000\000\000\
\000\000\017\000\000\000\000\000\017\000\017\000\017\000\017\000\
\000\000\000\000\000\000\000\000\029\000\029\000\017\000\017\000\
\010\000\010\000\000\000\010\000\010\000\017\000\017\000\017\000\
\017\000\017\000\010\000\029\000\000\000\000\000\029\000\010\000\
\029\000\000\000\010\000\010\000\010\000\010\000\000\000\000\000\
\000\000\029\000\029\000\000\000\010\000\010\000\000\000\029\000\
\029\000\029\000\029\000\029\000\010\000\010\000\010\000\010\000\
\000\000\000\000\000\000\005\000\005\000\000\000\067\000\068\000\
\069\000\070\000\005\000\071\000\000\000\072\000\000\000\073\000\
\000\000\074\000\000\000\005\000\000\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\005\000\005\000\000\000\
\000\000\096\000\000\000\005\000\067\000\068\000\069\000\070\000\
\000\000\071\000\000\000\072\000\000\000\073\000\000\000\074\000"

let yycheck = "\006\000\
\000\000\039\001\040\001\000\000\032\001\001\000\013\000\014\000\
\040\001\037\001\040\001\040\001\000\000\007\000\008\000\009\000\
\045\000\046\000\047\000\048\000\049\000\040\001\019\001\018\001\
\021\001\018\001\023\001\018\001\018\001\058\000\000\000\018\001\
\061\000\030\001\028\000\032\001\033\001\033\001\005\001\033\001\
\032\001\021\001\071\000\072\000\051\000\034\001\053\000\002\001\
\003\001\033\001\023\001\034\001\059\000\060\000\033\001\030\001\
\063\000\064\000\002\001\003\001\000\000\023\001\017\001\057\000\
\036\001\020\001\018\001\022\001\023\001\019\001\035\001\019\001\
\101\000\017\001\103\000\030\001\020\001\032\001\022\001\019\001\
\019\001\019\001\037\001\038\001\039\001\040\001\041\001\116\000\
\032\001\032\001\000\000\006\001\012\001\030\001\038\001\039\001\
\040\001\041\001\033\001\021\001\019\001\034\001\109\000\110\000\
\111\000\112\000\030\001\023\001\040\001\023\001\104\000\105\000\
\106\000\107\000\019\001\012\001\001\001\002\001\003\001\004\001\
\000\000\030\001\007\001\008\001\009\001\010\001\011\001\040\001\
\122\000\136\000\023\001\023\001\017\001\023\001\023\001\020\001\
\023\001\022\001\052\000\023\001\025\001\026\001\027\001\028\001\
\029\001\064\000\113\000\137\000\117\000\255\255\000\000\036\001\
\255\255\038\001\039\001\040\001\041\001\001\001\002\001\003\001\
\004\001\255\255\255\255\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\017\001\255\255\255\255\
\020\001\255\255\022\001\255\255\000\000\025\001\026\001\027\001\
\028\001\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\036\001\255\255\038\001\039\001\040\001\041\001\001\001\002\001\
\003\001\004\001\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\000\000\255\255\002\001\003\001\017\001\255\255\
\255\255\020\001\255\255\022\001\255\255\255\255\025\001\026\001\
\027\001\028\001\029\001\017\001\255\255\255\255\020\001\255\255\
\022\001\036\001\255\255\038\001\039\001\040\001\041\001\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\038\001\039\001\040\001\041\001\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\000\000\255\255\012\001\255\255\000\000\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\031\001\
\002\001\003\001\031\001\005\001\006\001\037\001\038\001\039\001\
\040\001\041\001\012\001\031\001\255\255\255\255\255\255\017\001\
\255\255\255\255\020\001\021\001\022\001\023\001\000\000\255\255\
\255\255\255\255\255\255\255\255\030\001\031\001\002\001\003\001\
\255\255\005\001\006\001\037\001\038\001\039\001\040\001\041\001\
\012\001\255\255\255\255\255\255\255\255\017\001\255\255\255\255\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\031\001\002\001\003\001\255\255\005\001\
\006\001\037\001\038\001\039\001\040\001\041\001\012\001\255\255\
\255\255\255\255\255\255\017\001\255\255\255\255\020\001\021\001\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\031\001\002\001\003\001\255\255\005\001\006\001\037\001\
\038\001\039\001\040\001\041\001\012\001\255\255\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\031\001\
\002\001\003\001\255\255\005\001\006\001\037\001\038\001\039\001\
\040\001\041\001\012\001\255\255\255\255\255\255\255\255\017\001\
\255\255\255\255\020\001\021\001\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\031\001\002\001\003\001\
\255\255\005\001\006\001\037\001\038\001\039\001\040\001\041\001\
\012\001\255\255\255\255\255\255\255\255\017\001\255\255\255\255\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\031\001\002\001\003\001\255\255\005\001\
\006\001\037\001\038\001\039\001\040\001\041\001\012\001\255\255\
\255\255\255\255\255\255\017\001\255\255\255\255\020\001\021\001\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\031\001\002\001\003\001\255\255\005\001\006\001\037\001\
\038\001\039\001\040\001\041\001\012\001\255\255\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\002\001\003\001\030\001\031\001\
\002\001\003\001\255\255\005\001\006\001\037\001\038\001\039\001\
\040\001\041\001\012\001\017\001\255\255\255\255\020\001\017\001\
\022\001\255\255\020\001\021\001\022\001\023\001\255\255\255\255\
\255\255\031\001\032\001\255\255\030\001\031\001\255\255\037\001\
\038\001\039\001\040\001\041\001\038\001\039\001\040\001\041\001\
\255\255\255\255\255\255\005\001\006\001\255\255\013\001\014\001\
\015\001\016\001\012\001\018\001\255\255\020\001\255\255\022\001\
\255\255\024\001\255\255\021\001\255\255\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\031\001\032\001\255\255\
\255\255\040\001\255\255\037\001\013\001\014\001\015\001\016\001\
\255\255\018\001\255\255\020\001\255\255\022\001\255\255\024\001"

let yynames_const = "\
  LAMBDA\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LET\000\
  LETREC\000\
  IN\000\
  BOOL\000\
  NAT\000\
  STRING\000\
  UNIT\000\
  UNITV\000\
  LCOR\000\
  RCOR\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  LIST\000\
  NIL\000\
  CONS\000\
  ISNIL\000\
  HEAD\000\
  TAIL\000\
  COMMA\000\
  SEMICOLON\000\
  DOT\000\
  EQ\000\
  COLON\000\
  ARROW\000\
  EOF\000\
  QM\000\
  CONCAT\000\
  "

let yynames_block = "\
  ID\000\
  INTV\000\
  STRINGV\000\
  STRINGT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termS) in
    Obj.repr(
# 59 "parser.mly"
      ( Bind (_1, _3))
# 402 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'termS) in
    Obj.repr(
# 61 "parser.mly"
      ( Eval _1 )
# 409 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 65 "parser.mly"
       ( _1 )
# 416 "parser.ml"
               : 'termS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'termS) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 67 "parser.mly"
      (TmApp(TmAbs("_",TyUnit, _3), _1))
# 424 "parser.ml"
               : 'termS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 72 "parser.mly"
      ( _1 )
# 431 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 74 "parser.mly"
      ( TmIf (_2, _4, _6) )
# 440 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 76 "parser.mly"
      ( TmAbs (_2, _4, _6) )
# 449 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 78 "parser.mly"
      ( TmLetIn (_2, _4, _6) )
# 458 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 80 "parser.mly"
      ( TmLetIn (_2, TmFix (TmAbs (_2, _4, _6)), _8) )
# 468 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 86 "parser.mly"
      ( _1 )
# 475 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 88 "parser.mly"
      ( TmSucc _2 )
# 482 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 90 "parser.mly"
      ( TmPred _2 )
# 489 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 92 "parser.mly"
      ( TmIsZero _2 )
# 496 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 94 "parser.mly"
      ( TmConcat (_1, _3) )
# 504 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 96 "parser.mly"
      ( TmApp (_1, _2) )
# 512 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 98 "parser.mly"
      ( TmString _2 )
# 519 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pathTerm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 100 "parser.mly"
     ( TmCons (_3,_5,_6) )
# 528 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 102 "parser.mly"
     ( TmIsNil (_3,_5) )
# 536 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 104 "parser.mly"
     ( TmHead (_3,_5) )
# 544 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 106 "parser.mly"
     ( TmTail (_3,_5) )
# 552 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 108 "parser.mly"
     ( TmNil (_3) )
# 559 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 114 "parser.mly"
      ( TmProj (_1, (string_of_int _3)))
# 567 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 117 "parser.mly"
      ( TmProj (_1,_3))
# 575 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 120 "parser.mly"
      ( _1 )
# 582 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 125 "parser.mly"
      ( _2 )
# 589 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 127 "parser.mly"
      ( _3 )
# 597 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
      (TmTrue)
# 603 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
      ( TmFalse )
# 609 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 133 "parser.mly"
      ( TmVar _1 )
# 616 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 135 "parser.mly"
      (TmString _1)
# 623 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 137 "parser.mly"
      ( let rec f = function
            0 -> TmZero
          | n -> TmSucc (f (n-1))
        in f _1 )
# 633 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
      ( TmUnit )
# 639 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordTM) in
    Obj.repr(
# 144 "parser.mly"
     (TmRecord _2)
# 646 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tuplesTM) in
    Obj.repr(
# 146 "parser.mly"
     ( TmTuple _2 )
# 653 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 150 "parser.mly"
              ( [] )
# 659 "parser.ml"
               : 'recordTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'noemptyrecordTM) in
    Obj.repr(
# 151 "parser.mly"
                    ( _1 )
# 666 "parser.ml"
               : 'recordTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 155 "parser.mly"
                    ([_1,_3])
# 674 "parser.ml"
               : 'noemptyrecordTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'noemptyrecordTM) in
    Obj.repr(
# 156 "parser.mly"
                                          ((_1,_3)::_5)
# 683 "parser.ml"
               : 'noemptyrecordTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 161 "parser.mly"
          ( [_1] )
# 690 "parser.ml"
               : 'tuplesTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuplesTM) in
    Obj.repr(
# 162 "parser.mly"
                         ( _1::_3 )
# 698 "parser.ml"
               : 'tuplesTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTy) in
    Obj.repr(
# 167 "parser.mly"
      ( _1 )
# 705 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTy) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 169 "parser.mly"
      ( TyArr (_1, _3) )
# 713 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 173 "parser.mly"
      ( _2 )
# 720 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 175 "parser.mly"
      ( _2 )
# 727 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "parser.mly"
      ( TyBool )
# 733 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 179 "parser.mly"
      ( TyNat )
# 739 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "parser.mly"
      ( TyString )
# 745 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 183 "parser.mly"
      ( TyUnit )
# 751 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordTY) in
    Obj.repr(
# 185 "parser.mly"
      ( TyRecord _2 )
# 758 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tuplesTY) in
    Obj.repr(
# 187 "parser.mly"
      ( TyTuple _2 )
# 765 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 189 "parser.mly"
      ( TyList _3 )
# 772 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 193 "parser.mly"
           ( [] )
# 778 "parser.ml"
               : 'recordTY))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'noemptyrecordTY) in
    Obj.repr(
# 194 "parser.mly"
                    ( _1 )
# 785 "parser.ml"
               : 'recordTY))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 197 "parser.mly"
                     ([_1,_3])
# 793 "parser.ml"
               : 'noemptyrecordTY))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'noemptyrecordTY) in
    Obj.repr(
# 198 "parser.mly"
                                           ((_1,_3)::_5)
# 802 "parser.ml"
               : 'noemptyrecordTY))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 201 "parser.mly"
       ( [_1] )
# 809 "parser.ml"
               : 'tuplesTY))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuplesTY) in
    Obj.repr(
# 202 "parser.mly"
                      ( _1::_3 )
# 817 "parser.ml"
               : 'tuplesTY))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lambda.command)
